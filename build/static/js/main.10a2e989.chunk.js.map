{"version":3,"sources":["img/r2h.png","img/fellowships.png","components/square/square.js","components/board/board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","value","Board","initialBoard","Array","fill","useState","squares","setSquares","playerXIsNext","setPlayerXIsNext","renderSquare","i","handleClick","newSquares","winner","line","a","b","c","calculateWinner","src","r2h","alt","fellowship","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,8KCY5BC,EATA,SAACC,GACZ,OACI,oCACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,S,gCCuFRC,EAxFD,WAEV,IAAMC,EAAeC,MAAM,GAAGC,KAAK,MAFnB,EAGcC,mBAASH,GAHvB,mBAGTI,EAHS,KAGAC,EAHA,OAI0BF,oBAAS,GAJnC,mBAITG,EAJS,KAIMC,EAJN,KAOVC,EAAe,SAACC,GAElB,OAAO,kBAAC,EAAD,CAAQX,MAAOM,EAAQK,GAAIZ,QAAS,kBAAMa,EAAYD,OAG3DC,EAAc,SAACD,GACjB,IAAME,EAAU,YAAOP,GAEvBO,EAAWF,GAAKH,EAAgB,IAAM,IACtCD,EAAWM,GACXJ,GAAkBD,IA6BhBM,EA1BkB,SAACR,GAkBzB,IAZG,IAYH,MAZiB,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIX,eAAuB,CAAlB,IAAIS,EAAI,KAAU,cACDA,EADC,GACZC,EADY,KACTC,EADS,KACNC,EADM,KAEnB,GAAKZ,EAAQU,IAAMV,EAAQU,KAAOV,EAAQW,IAAMX,EAAQU,KAAOV,EAAQY,GACnE,OAAOZ,EAAQU,GAGvB,OAAO,KAEQG,CAAgBb,GAS/B,OACI,oCACI,0BAAMR,UAAU,mBACZ,yBAAKA,UAAU,QACX,yBAAKsB,IAAKC,IAAKC,IAAI,aACnB,yBAAKF,IAAKG,IAAYD,IAAI,gBAE9B,yBAAKxB,UAAU,UAbpBgB,EACQ,mBAAqBA,EAErB,yBAA2BN,EAAgB,IAAM,MAapD,yBAAKV,UAAU,oBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,cACVY,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKZ,UAAU,cACVY,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKZ,UAAU,cACVY,EAAa,GACbA,EAAa,GACbA,EAAa,SC5E3Bc,MAPf,WACE,OACE,oCACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.10a2e989.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/r2h.175c9dae.png\";","module.exports = __webpack_public_path__ + \"static/media/fellowships.be71a5fb.png\";","import React from 'react';\n// Creating a component that will represent each square on my \n// board.\nconst Square = (props) => {\n    return (\n        <>\n            <button className=\"square\" onClick={props.onClick}>\n                {props.value}\n            </button>\n        </>\n    )\n}\nexport default Square;","//board//\nimport React, { useState } from 'react';\nimport Square from '/Users/Jrez/Documents/tic-tac-toe/ticTacToe-Repo/src/components/square/square.js';\nimport r2h from '/Users/Jrez/Documents/tic-tac-toe/ticTacToe-Repo/src/img/r2h.png'\nimport fellowship from '/Users/Jrez/Documents/tic-tac-toe/ticTacToe-Repo/src/img/fellowships.png'\n\nconst Board = () => {\n\n    const initialBoard = Array(9).fill(null)\n    const [squares, setSquares] = useState(initialBoard)\n    const [playerXIsNext, setPlayerXIsNext] = useState(true)\n\n\n    const renderSquare = (i) => {\n\n        return <Square value={squares[i]} onClick={() => handleClick(i)}/>\n    }\n\n    const handleClick = (i) => {\n        const newSquares = [...squares]\n\n        newSquares[i] = playerXIsNext ? \"X\" : \"O\"\n        setSquares(newSquares)\n        setPlayerXIsNext(!playerXIsNext)\n    }\n\n    const calculateWinner = (squares) => {\n        /* Squares indexes as they appear in UI:\n        0 1 2\n        3 4 5\n        6 7 8\n        */\n       const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ]; // shows all of the winning combinations (\"lines\")\n\n    // Iterate over lines \n    for (let line of lines){\n        const [a, b, c] = line\n        if ( squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n            return squares[a]\n        }\n    }\n    return null\n    }\n    const winner = calculateWinner(squares)\n\n    const getStatus = () => {\n        if(winner){\n            return \"Congrates player\" + winner\n        } else {\n            return \"Next player is player\" + (playerXIsNext ? \"X\" : \"O\")\n        }\n    }\n    return (\n        <>\n            <main className=\"main--container\">\n                <div className=\"logo\">\n                    <img src={r2h} alt=\"r2h logo\" />\n                    <img src={fellowship} alt=\"fellowship\" />\n                </div>\n                <div className=\"status\">\n                    {getStatus()}\n                </div>\n                <div className=\"board--container\">\n                    <div className=\"board\">\n                        <div className=\"board--row\">\n                            {renderSquare(0)}\n                            {renderSquare(1)}\n                            {renderSquare(2)}\n                        </div>\n                        <div className=\"board--row\">\n                            {renderSquare(3)}\n                            {renderSquare(4)}\n                            {renderSquare(5)}\n                        </div>\n                        <div className=\"board--row\">\n                            {renderSquare(6)}\n                            {renderSquare(7)}\n                            {renderSquare(8)}\n                        </div>\n                    </div>\n                </div>\n            </main>\n        </>\n    )\n}\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from '/Users/Jrez/Documents/tic-tac-toe/ticTacToe-Repo/src/components/board/board.js'\nfunction App() {\n  return (\n    <>\n      <Board />\n    </>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}